variables:
  ARGO_SERVER: 'argo-server.argo.svc.cluster.local:2746'
  ARGO_HTTP1: 'true'
  ARGO_SECURE: 'false'
  ARGO_NAMESPACE: argo
  ARGO_VERSION: v3.4.1
  DOCKER_TLS_CERTDIR: '/certs'
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: '${DOCKER_TLS_CERTDIR}/client'
  BUILDER_IMAGE: 'kubefirst/chubbo:0.2'
  GITLAB_GROUP_NAME: '<GITLAB_OWNER>'

.setup-argocd: &setup-argocd
  - cd $HOME
  - echo "Install argo"
  - curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-amd64.gz
  - gunzip argo-linux-amd64.gz
  - chmod +x argo-linux-amd64
  - mv ./argo-linux-amd64 /usr/local/bin/argo
  - argo version --short
  - cd $CI_PROJECT_DIR

.create-registry-auth: &create-registry-auth
  - >
    echo "{
      \"auths\": {
        \"$CI_REGISTRY\": {
          \"auth\": \"$(echo -n \"$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD\" | base64)\"
        }
      }
    }" >> $HOME/dockerconfig.json

stages:
  - build
  - development
  - staging
  - release

build:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f build/Dockerfile -t $CI_REGISTRY/${GITLAB_GROUP_NAME}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA} .
    - docker push $CI_REGISTRY/${GITLAB_GROUP_NAME}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}

development:
  image: '${BUILDER_IMAGE}'
  stage: development
  only:
    - main
  script:
    - *setup-argocd
    - echo "commit sha $CI_COMMIT_SHA"
    - |
      argo submit .argo/deploy.yaml \
        --generate-name="${CI_PROJECT_NAME}-development-${CI_COMMIT_SHORT_SHA}-" \
        -p gitOwner="${GITLAB_GROUP_NAME}" \
        -p appName="${CI_PROJECT_NAME}" \
        -p branch="${CI_COMMIT_REF_NAME}" \
        -p clusterName="<CLUSTER_NAME>" \
        -p environment="development" \
        -p gitUrlNoProtocol="git@gitlab.com:${GITLAB_GROUP_NAME}" \
        -p shortSha="${CI_COMMIT_SHORT_SHA}" \
        -p ciCommitSha="${CI_COMMIT_SHA}" \
        --wait --log
    - echo "⭐️ the kubefirst open source platform is powered by github stars. give kubefirst one today https://github.com/kubefirst/kubefirst"

staging:
  image: '${BUILDER_IMAGE}'
  stage: staging
  only:
    - main
  script:
    - *setup-argocd
    - echo "commit sha $CI_COMMIT_SHA"
    - |
      argo submit .argo/deploy.yaml \
        --generate-name="${CI_PROJECT_NAME}-staging-${CI_COMMIT_SHORT_SHA}-" \
        -p gitOwner="${GITLAB_GROUP_NAME}" \
        -p appName="${CI_PROJECT_NAME}" \
        -p branch="${CI_COMMIT_REF_NAME}" \
        -p clusterName="<CLUSTER_NAME>" \
        -p environment="staging" \
        -p gitUrlNoProtocol="git@gitlab.com:${GITLAB_GROUP_NAME}" \
        -p shortSha="${CI_COMMIT_SHORT_SHA}" \
        -p ciCommitSha="${CI_COMMIT_SHA}" \
        --wait --log
    - echo "⭐️ the kubefirst open source platform is powered by github stars. give kubefirst one today https://github.com/kubefirst/kubefirst"

release:
  image: '${BUILDER_IMAGE}'
  stage: release
  only:
    - main
  script:
    - *setup-argocd
    - echo "commit sha $CI_COMMIT_SHA"
    - |
      argo submit .argo/release.yaml \
        --generate-name="${CI_PROJECT_NAME}-production-${CI_COMMIT_SHORT_SHA}-" \
        -p gitOwner="${GITLAB_GROUP_NAME}" \
        -p appName="${CI_PROJECT_NAME}" \
        -p branch="${CI_COMMIT_REF_NAME}" \
        -p clusterName="<CLUSTER_NAME>" \
        -p environment="production" \
        -p gitUrlNoProtocol="git@gitlab.com:${GITLAB_GROUP_NAME}" \
        -p shortSha="${CI_COMMIT_SHORT_SHA}" \
        -p ciCommitSha="${CI_COMMIT_SHA}" \
        --wait --log
    - echo "⭐️ the kubefirst open source platform is powered by github stars. give kubefirst one today https://github.com/kubefirst/kubefirst"
