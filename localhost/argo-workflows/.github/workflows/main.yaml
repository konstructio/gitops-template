name:  release
env:
  ARGO_NAMESPACE: argo
  ARGO_VERSION: v3.1.11
on:
 push:
   branches:
   - main
jobs:
  publish:
    runs-on: self-hosted
    # container:
    #   image: argoproj/argocli:latest
    steps:
    - name: Setup Runner for Argo
      run: |
        cd $HOME
        echo "Install argo"
        # Download the binary
        curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-amd64.gz
        # Unzip
        gunzip argo-linux-amd64.gz
        # Make binary executable
        chmod +x argo-linux-amd64
        # Move binary to path
        sudo mv ./argo-linux-amd64 /usr/local/bin/argo
        # Test installation
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v4
    - run: echo ${GITHUB_REPOSITORY}
    - run: echo ${GITHUB_REPOSITORY_NAME_PART}
    - run: echo ${GITHUB_SERVER_URL}
    - name: publish
      run: |
        echo "commit sha ${GITHUB_SHA}"
        argo version --short
        argo submit .argo/publish.yaml \
          --generate-name="${GITHUB_REPOSITORY_NAME_PART}-publish-${GITHUB_SHA_SHORT}-" \
          -p appName="${GITHUB_REPOSITORY_NAME_PART}" \
          -p appRepoUrl="" \
          -p ciCommitSha="${GITHUB_SHA}" \
          -p branch="${GITHUB_REF_NAME}" \
          -p dockerFilePath="build/Dockerfile" \
          -p gitOwner="${GITHUB_REPOSITORY_OWNER_PART}" \
          -p gitServerUrl="${GITHUB_SERVER_URL}" \
          -p gitopsRepoUrl="" \
          -p shortSha="${GITHUB_SHA_SHORT}" \
          --wait --log
    - run: echo "✨ This job's status is ${{ job.status }}."
  development:
    needs: publish
    runs-on: self-hosted
    steps:
      - name: Setup Runner for Argo
        run: |
            cd $HOME
            echo "Install argo"
            # Download the binary
            curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-amd64.gz
            # Unzip
            gunzip argo-linux-amd64.gz
            # Make binary executable
            chmod +x argo-linux-amd64
            # Move binary to path
            sudo mv ./argo-linux-amd64 /usr/local/bin/argo
            # Test installation
            argo version --short
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: development
        run: |
          echo "commit sha $GITHUB_SHA"
          argo version --short
          argo submit .argo/deploy.yaml \
            --generate-name="${GITHUB_REPOSITORY_NAME_PART}-development-${GITHUB_SHA_SHORT}-" \
            -p appName="${GITHUB_REPOSITORY_NAME_PART}" \
            -p appRepoUrl="" \
            -p branch="${GITHUB_REF_NAME}" \
            -p environment="development" \
            -p gitopsRepoUrl="" \
            -p gitOwner="${GITHUB_REPOSITORY_OWNER_PART}" \
            -p gitServerUrl="${GITHUB_SERVER_URL}" \
            -p shortSha="${GITHUB_SHA_SHORT}" \
            --wait --log
      - run: echo "✨ This job's status is ${{ job.status }}."
  staging:
    needs: development
    runs-on: self-hosted
    steps:
      - name: Setup Runner for Argo
        run: |
            cd $HOME
            echo "Install argo"
            # Download the binary
            curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-amd64.gz
            # Unzip
            gunzip argo-linux-amd64.gz
            # Make binary executable
            chmod +x argo-linux-amd64
            # Move binary to path
            sudo mv ./argo-linux-amd64 /usr/local/bin/argo
            # Test installation
            argo version --short
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: staging
        run: |
          echo "commit sha $GITHUB_SHA"
          argo version --short
          argo submit .argo/deploy.yaml \
            --generate-name="${GITHUB_REPOSITORY_NAME_PART}-staging-${GITHUB_SHA_SHORT}-" \
            -p appName="${GITHUB_REPOSITORY_NAME_PART}" \
            -p appRepoUrl="" \
            -p branch="${GITHUB_REF_NAME}" \
            -p environment="staging" \
            -p gitopsRepoUrl="" \
            -p gitOwner="${GITHUB_REPOSITORY_OWNER_PART}" \
            -p gitServerUrl="${GITHUB_SERVER_URL}" \
            -p shortSha="${GITHUB_SHA_SHORT}" \
            --wait --log
      - run: echo "✨ This job's status is ${{ job.status }}."
  release:
    needs: staging
    runs-on: self-hosted
    steps:
      - name: Setup Runner for Argo
        run: |
            cd $HOME
            echo "Install argo"
            # Download the binary
            curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-amd64.gz
            # Unzip
            gunzip argo-linux-amd64.gz
            # Make binary executable
            chmod +x argo-linux-amd64
            # Move binary to path
            sudo mv ./argo-linux-amd64 /usr/local/bin/argo
            # Test installation
            argo version --short
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: release
        run: |
          echo "commit sha $GITHUB_SHA"
          argo version --short
          argo submit .argo/release.yaml \
            --generate-name="${GITHUB_REPOSITORY_NAME_PART}-release-${GITHUB_SHA_SHORT}-" \
            -p appName="${GITHUB_REPOSITORY_NAME_PART}" \
            -p appRepoUrl="" \
            -p ciCommitSha="${GITHUB_SHA}" \
            -p branch="${GITHUB_REF_NAME}" \
            -p environment="production" \
            -p gitopsRepoUrl="" \
            -p gitOwner="${GITHUB_REPOSITORY_OWNER_PART}" \
            -p gitServerUrl="${GITHUB_SERVER_URL}" \
            -p shortSha="${GITHUB_SHA_SHORT}" \
            --wait --log
      - run: echo "✨ This job's status is ${{ job.status }}."
