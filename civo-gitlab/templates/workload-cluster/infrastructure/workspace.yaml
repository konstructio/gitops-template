apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: <WORKLOAD_CLUSTER_NAME>
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    crossplane.io/external-name: <WORKLOAD_CLUSTER_NAME>
spec:
  providerConfigRef:
    name: <WORKLOAD_CLUSTER_NAME>
  forProvider:
    source: Inline
    module: |
      variable "instance_size" {
        type    = string
        default = "g4s.kube.medium"
      }

      variable "node_count" {
        type    = number
        default = "3"
      }

      locals {
        cluster_name = "<WORKLOAD_CLUSTER_NAME>"
      }

      resource "civo_network" "kubefirst" {
        label = local.cluster_name
      }

      resource "civo_firewall" "kubefirst" {
        name                 = local.cluster_name
        network_id           = civo_network.kubefirst.id
        create_default_rules = true
      }

      resource "civo_kubernetes_cluster" "kubefirst" {
        name        = local.cluster_name
        network_id  = civo_network.kubefirst.id
        firewall_id = civo_firewall.kubefirst.id
        pools {
          label      = local.cluster_name
          size       = var.instance_size
          node_count = var.node_count
        }
      }

      resource "vault_generic_secret" "clusters" {
        path = "secret/clusters/${local.cluster_name}"

        data_json = jsonencode(
          {
            kubeconfig             = civo_kubernetes_cluster.kubefirst.kubeconfig
            client_certificate     = base64decode(yamldecode(civo_kubernetes_cluster.kubefirst.kubeconfig).users[0].user.client-certificate-data)
            client_key             = base64decode(yamldecode(civo_kubernetes_cluster.kubefirst.kubeconfig).users[0].user.client-key-data)
            cluster_ca_certificate = base64decode(yamldecode(civo_kubernetes_cluster.kubefirst.kubeconfig).clusters[0].cluster.certificate-authority-data)
            host                   = civo_kubernetes_cluster.kubefirst.api_endpoint
            cluster_name           = local.cluster_name
            argocd_manager_sa_token = kubernetes_secret_v1.argocd_manager.data.token
          }
        )
      }

      provider "kubernetes" {
        host                   = civo_kubernetes_cluster.kubefirst.api_endpoint
        client_certificate     = base64decode(yamldecode(civo_kubernetes_cluster.kubefirst.kubeconfig).users[0].user.client-certificate-data)
        client_key             = base64decode(yamldecode(civo_kubernetes_cluster.kubefirst.kubeconfig).users[0].user.client-key-data)
        cluster_ca_certificate = base64decode(yamldecode(civo_kubernetes_cluster.kubefirst.kubeconfig).clusters[0].cluster.certificate-authority-data)
      }

      resource "kubernetes_cluster_role_v1" "argocd_manager" {
        metadata {
          name = "argocd-manager-role"
        }

        rule {
          api_groups = ["*"]
          resources  = ["*"]
          verbs      = ["*"]
        }
        rule {
          non_resource_urls = ["*"]
          verbs = ["*"]
        }
      }


      resource "kubernetes_cluster_role_binding_v1" "argocd_manager" {
        metadata {
          name = "argocd-manager-role-binding"
        }
        role_ref {
          api_group = "rbac.authorization.k8s.io"
          kind      = "ClusterRole"
          name      = kubernetes_cluster_role_v1.argocd_manager.metadata.0.name
        }
        subject {
          kind      = "ServiceAccount"
          name      = kubernetes_service_account_v1.argocd_manager.metadata.0.name
          namespace = "kube-system"
        }
      }

      resource "kubernetes_service_account_v1" "argocd_manager" {
        metadata {
          name = "argocd-manager"
          namespace = "kube-system"
        }
        secret {
          name = "argocd-manager-token"
        }
      }

      resource "kubernetes_secret_v1" "argocd_manager" {
        metadata {
          name = "argocd-manager-token"
          namespace = "kube-system"
          annotations = {
            "kubernetes.io/service-account.name" = "argocd-manager"
          }
        }
        type = "kubernetes.io/service-account-token"
        depends_on = [ kubernetes_service_account_v1.argocd_manager ]
      }

      resource "kubernetes_namespace_v1" "external_dns" {
        metadata {
          name = "external-dns"
        }
      }

      data "vault_generic_secret" "external_dns" {
        path = "secret/external-dns"
      }

      resource "kubernetes_secret_v1" "external_dns" {
        metadata {
          name = "${local.cluster_name}-cluster-vault-bootstrap"
          namespace = kubernetes_namespace_v1.external_dns.metadata.0.name
        }
        data = {
          civo-token = data.vault_generic_secret.external_dns.data["civo-token"]
          cf-api-token = data.vault_generic_secret.external_dns.data["cloudflare-token"]
        }
        type = "Opaque"
      }


      resource "kubernetes_namespace_v1" "external_secrets_operator" {
        metadata {
          name = "external-secrets-operator"
        }
      }

      resource "kubernetes_namespace_v1" "environment" {
        metadata {
          name = "<WORKLOAD_CLUSTER_NAME>"
        }
      }

      data "vault_generic_secret" "docker_config" {
        path = "secret/dockerconfigjson"
      }

      resource "kubernetes_secret_v1" "image_pull" {
        metadata {
          name = "docker-config"
          namespace = kubernetes_namespace_v1.environment.metadata.0.name
        }

        data = {
          ".dockerconfigjson" = data.vault_generic_secret.docker_config.data["dockerconfig"]
        }

        type = "kubernetes.io/dockerconfigjson"
      }

      data "vault_generic_secret" "external_secrets_operator" {
        path = "secret/atlantis"
      }

      resource "kubernetes_secret_v1" "external_secrets_operator_environment" {
        metadata {
          name = "${local.cluster_name}-cluster-vault-bootstrap"
          namespace = kubernetes_namespace_v1.environment.metadata.0.name
        }
        data = {
          vault-token = data.vault_generic_secret.external_secrets_operator.data["VAULT_TOKEN"]
        }
        type = "Opaque"
      }

      resource "kubernetes_secret_v1" "external_secrets_operator" {
        metadata {
          name = "${local.cluster_name}-cluster-vault-bootstrap"
          namespace = kubernetes_namespace_v1.external_secrets_operator.metadata.0.name
        }
        data = {
          vault-token = data.vault_generic_secret.external_secrets_operator.data["VAULT_TOKEN"]
        }
        type = "Opaque"
      }

      resource "kubernetes_service_account_v1" "external_secrets" {
        metadata {
          name = "external-secrets"
          namespace = kubernetes_namespace_v1.external_secrets_operator.metadata.0.name
        }
        secret {
          name = "external-secrets-token"
        }
      }

      resource "kubernetes_secret_v1" "external_secrets" {
        metadata {
          name = "external-secrets-token"
          namespace = kubernetes_namespace_v1.external_secrets_operator.metadata.0.name
          annotations = {
            "kubernetes.io/service-account.name" = "external-secrets"
          }
        }
        type = "kubernetes.io/service-account-token"
        depends_on = [ kubernetes_service_account_v1.external_secrets ]
      }
